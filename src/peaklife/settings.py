"""
Django settings for peaklife project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import django_heroku
import dj_database_url


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "la#p^-+e3cn_pk43(n5w7e_11d!mgw*k5v+#y=52u6_hle1n=t"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "indicators",
    "mathfilters",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

ROOT_URLCONF = "peaklife.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "peaklife.wsgi.application"

DATABASES = {}
DATABASES["default"] = DATABASES["default"] = dj_database_url.config(
    default="postgres://wmebgokpqnyxke:7870564364c621056168638e615fb532c93dd10ba2706a1e94d14b741c8972c6@ec2-54-228-207-163.eu-west-1.compute.amazonaws.com:5432/d21gld7dc2j4tk",
    conn_max_age=600,
)


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(PROJECT_ROOT, "static")

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

django_heroku.settings(locals())

"""
Storage file dictionary of all the indicators necessary for the overall score.
The dictionaries are differentiated respect to the database they are coming from.

The dictionary presents the following data related to a specific indicator:
[1] - code endpoint for retrieving
[2] - Best possible score of the category
[3] - worst possible score of the category
[4] - weight of the score in the overall score (taken from 1 to 10)
"""

indicators = {
    "Road Death Rate": ("RS_198", 0, 35.0, 8),
    "Expected Life at Birth": ("WHOSIS_000001", 78.8, 44.0, 10),
    "Death Rate Due to Air Pollution": ("AIR_5", 0, 67.0, 10),
    "Government Expense on Health": ("WHS7_149", 98.36, 20.39, 8),
    "Population with access to drinking water services": ("WSH_WATER_BASIC", 100, 0, 6),
    "Concentrations of fine particulate matter (%)": ("SDGPM25", 5.2, 81.3, 8),
    "Medical Doctors (per 10000 population)": ("HWF_0001", 81.9, 0.008, 7),
    "Suicide mortality rate (per 100000 population": ("SDGSUICIDE", 0.1, 21, 10),
    "Domestic general government health expenditure (GGHE-D) as percentage of current health expenditure (CHE) (%)": (
        "GHED_GGHE-DCHE_SHA2011",
        96.7,
        0,
        9,
    ),
}

indicators_female_youth = {
    "Adolescent birth rate (per 1000 women aged 15-19 years)": (
        "SDGFPALL",
        96.6,
        8.0,
        5,
    ),
    "15-19 years old, current female drinkers (%)": ("SA_0000001759", 0, 80, 7),
    "Alcohol, Consumption in litres of pure alcohol (Female)": (
        "SA_0000001404",
        0.8,
        39,
        8,
    ),
    "Proportion of ever-partnered women and girls subjected to physical and sexual violence": (
        "SDGIPV",
        0,
        48.6,
        10,
    ),
}

indicators_male_youth = {
    "15-19 years old, current male drinkers (%)": ("SA_0000001759", 0.1, 92, 7),
    "Alcohol, Consumption in litres of pure alcohol (Male)": (
        "SA_0000001404",
        0.4,
        34.6,
        9,
    ),
}

indicators_female_adult = {
    "Alcohol, Consumption in litres of pure alcohol (Female)": (
        "SA_0000001404",
        0.8,
        39,
        8,
    ),
    "Proportion of ever-partnered women and girls subjected to physical and sexual violence": (
        "SDGIPV",
        0,
        48.6,
        10,
    ),
    "Mortality between 30 and 70 years from cardiovascular diseases, cancer, diabetes or chronic respiratory diseases": (
        "NCDMORT3070",
        7.5,
        33.3,
        8,
    ),
}

indicators_male_adult = {
    "Alcohol, Consumption in litres of pure alcohol (Male)": (
        "SA_0000001404",
        0.4,
        34.6,
        8,
    ),
    "Mortality between 30 and 70 years from cardiovascular diseases, cancer, diabetes or chronic respiratory diseases": (
        "NCDMORT3070",
        7.5,
        33.3,
        8,
    ),
}
